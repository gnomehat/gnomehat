#!/usr/bin/env python3
import sys
import traceback
import time
import os
import json
import fcntl
import subprocess
from socket import gethostname
import requests
from gnomehat import sysinfo

import logging
logger = logging.getLogger('worker')

CHAT_URL = os.environ.get('GNOMEHAT_CHAT_URL')

def log(*args):
    print(*args)
    logger.info(*args)


def configure_logger(experiments_dir):
    timestamp = str(int(time.time()))
    log_filename = os.path.join(experiments_dir, 'worker_{}.txt'.format(timestamp))
    logger.addHandler(logging.FileHandler(log_filename))


def chat_notification(msg):
    log(msg)
    if not CHAT_URL:
        return
    try:
        resp = requests.post(CHAT_URL, data={
            'username': gethostname(),
            'message': msg,
        })
    except Exception as e:
        log("Failed to send chat message due to {}: {}".format(e, msg))


def get_gpu():
    available_gpus = sysinfo.get_gpu_info()
    cuda_visible = os.environ.get('CUDA_VISIBLE_DEVICES')
    if cuda_visible:
        gpu_idx = int(cuda_visible)
    else:
        gpu_idx = 0
    gpu = available_gpus[gpu_idx]
    return gpu_idx


def getinfo():
    info = {
        'name': gethostname(),
        'start_time': time.time(),
        'gpu': get_gpu(),
    }
    return json.dumps(info)


def run_experiments(experiments_dir):
    log('Worker waking up...')
    experiments = os.listdir(experiments_dir)
    for name in experiments:
        dirname = os.path.join(experiments_dir, name)
        if not os.path.isdir(dirname):
            continue
        files = os.listdir(dirname)
        # Look for one that has a ./gnomehat_start.sh
        if not 'gnomehat_start.sh' in files:
            continue
        # And does not have a worker_lockfile
        if 'worker_lockfile' in files:
            continue
        # And does not have a worker_finished
        if 'worker_finished' in files:
            continue
        # And did not fail due to an error
        if 'worker_error' in files:
            continue
        chat_notification('Starting job {}'.format(dirname))
        run_experiment(dirname)
        break
    log('Worker sleeping...')


def run_experiment(dirname):
    os.chdir(dirname)
    lockfile_name = os.path.join(dirname, 'worker_lockfile')
    fp_lock = open(lockfile_name, 'w+')
    log("Attempting to acquire lock on {}".format(lockfile_name))
    try:
        fcntl.flock(fp_lock, fcntl.LOCK_EX | fcntl.LOCK_NB)
        log('Acquired lock on {}'.format(lockfile_name))
    except OSError:
        log('Experiment is already locked by another process')
        return

    try:
        with open('worker_started', 'w') as fp:
            fp.write(getinfo())

        # Run the experiment
        with open('stdout.txt', 'a') as log_fp:
            timestamp = subprocess.check_output('date').decode('utf-8').strip()
            log('Writing to the logfile...')
            log_fp.write('[Worker starting experiment at {}]\n'.format(timestamp))
            log('calling subprocess.Popen')
            proc = subprocess.Popen('./start.sh',
                                    stdout=subprocess.PIPE,
                                    stderr=subprocess.STDOUT,
                                    bufsize=1,
                                    universal_newlines=True)
            log('reading from subprocess...()')
            for line in iter(proc.stdout.readline, ''):
                log_fp.write(line)
                log_fp.flush()
            log('process is dead, stdout is closed')

        log("Finished running experiment {}".format(dirname))

        # Then write worker_finished
        with open('worker_finished', 'w') as fp:
            fp.write('{}'.format(getinfo()))
            chat_notification('Finished job {}'.format(dirname))
    except Exception as e:
        chat_notification("Error {} while running experiment {}".format(e, dirname))
        with open('worker_error', 'w') as fp:
            traceback.print_exc()
            fp.write('{}'.format(e))
    finally:
        log('Removing lock on file {}'.format(lockfile_name))
        fcntl.flock(fp_lock, fcntl.LOCK_UN)
        if os.path.exists(lockfile_name):
            os.remove(lockfile_name)
    log('Finished cleaning up experiment {}'.format(dirname))


def main(experiments_dir):
    configure_logger(experiments_dir)
    gpu = get_gpu()
    chat_notification('Worker starting with GPU {} in {}'.format(gpu, experiments_dir))
    os.chdir(experiments_dir)
    while True:
        log('Worker looking for jobs...')
        run_experiments(experiments_dir)
        time.sleep(3)


if __name__ == '__main__':
    if len(sys.argv) < 2:
        log('Usage: worker <experiments_dir>')
        log('\texperiments_dir: Directory containing experiments (eg. /home/username/experiments)')
        exit(1)
    experiments_dir = sys.argv[1]
    main(experiments_dir)
